
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id      String @id @default(uuid())
  firstName   String
  lastName   String
  email   String   @unique
  phoneNumber String @unique // it include country code (+251)
  password String
  status  UserStatus?
  profileImage String
  role  Role @default(user) 
  vehicles Vehicle[]
  parkingProvider ParkingProvider[]
  book Booking[]
  payment Payment[]
  ratingReview RatingReview []
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vehicle{
 id      String @id @default(uuid())
  vehicleName    String
  vehicleType   VehicleType 
  plateNumber  String //AA2893
  vehicleColor    String?   //optional
  userId    String 
  user   User @relation(fields: [userId] ,references: [id])
  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ParkingProvider{
   id      String @id @default(uuid())
   providerName String @unique
   description String?
   totalSpace Int
   email String  @unique
   contactNumber String @unique
   adminId String   
   admin User  @relation(fields:[adminId] ,references:[id])
   openingTime String
   closingTime String
   address  Address?
   book Booking[]
   ratingReview RatingReview []
   createdAt DateTime @default(now())
   updatedAt  DateTime @updatedAt
}

model Address{
   id      String @id @default(uuid())
   city String
   street String
   longitude  Float
   latitude  Float
   providerId String @unique
   provider ParkingProvider @relation(fields: [providerId], references: [id])
   createdAt DateTime @default(now())
   updatedAt  DateTime @updatedAt
}
model Booking{
   id      String @id @default(uuid())
   userId    String 
   user   User @relation(fields: [userId] ,references: [id])
   providerId String
   provider ParkingProvider @relation(fields: [providerId], references: [id])
   status BookingStatus
   price Float
   payment Payment?
   startTime  DateTime
   endTime    DateTime
   createdAt  DateTime @default(now())
   updatedAt  DateTime @updatedAt
}

model Payment{
   id      String @id @default(uuid())
   userId    String 
   user   User @relation(fields: [userId] ,references: [id])
   bookingId    String @unique //1-1
   book   Booking @relation(fields: [bookingId] ,references: [id])
   totalAmonut Float
   
}
model RatingReview{
   id      String @id @default(uuid())
   userId    String 
   user   User @relation(fields: [userId] ,references: [id])
    providerId String
   provider ParkingProvider @relation(fields: [providerId], references: [id])
}



enum Role{
  admin
  user
  superAdmin
  }
enum BookingStatus{
  pending
  cancelled
  confirmed
  }
enum PaymentStatus{
  pending
  completed
  cancelled

  }

  enum UserStatus{
    active
    inActive
  }
  
  enum VehicleType{
    van
    Truck
    Motorcycle
    fireTruck
    Buses
  }